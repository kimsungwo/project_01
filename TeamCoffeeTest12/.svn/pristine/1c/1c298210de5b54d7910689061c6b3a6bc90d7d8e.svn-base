package com.teamcoffee.member.controller;

import java.security.SecureRandom;
import java.util.Date;

import javax.annotation.Resource;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailSender;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.teamcoffee.member.service.MemberService;
import com.teamcoffee.member.vo.MemberVO;
import com.teamcoffee.util.sha256;


@Controller
@RequestMapping("/member")
public class MemberController {
	@Resource(name="memberService")
	private MemberService memberService;
	
	@Autowired
	private JavaMailSender emailSender;
	
	//일반회원 회원가입 페이지 이동
	@GetMapping("/joinMember")
	public String joinMember() {
		return "member/join_form";
	}
	
	//아이디 중복확인
	@ResponseBody
	@PostMapping("/memIdCheck")
	public String memIdCheck(MemberVO memberVO) {
		String result = memberService.memIdCheck(memberVO);
		return result;
	}
	
	//이메일 중복확인
	@ResponseBody
	@PostMapping("/memEmailCheck")
	public String memEmailCheck(MemberVO memberVO) {
		String result = memberService.memEmailCheck(memberVO);
		return result;
	}

	//일반회원 회원가입 처리
	@PostMapping("/insertMember")
	public String insertMember(MemberVO memberVO) {
		memberService.insertMember(memberVO);
		return "redirect:/cafe/main";
	}
	
	//일반회원 로그인 처리
	@ResponseBody
	@PostMapping("/memberLoginProcess")
	public MemberVO memberLoginProcess(MemberVO memberVO, HttpSession session) {
		String salt = memberService.getSaltByMemId(memberVO);
		String memPw = memberVO.getMemPw();
		
		memPw = sha256.getEncrypt(memPw, salt);
		memberVO.setMemPw(memPw);
		MemberVO result = memberService.memberLoginProcess(memberVO);
		if(result != null) {
			session.setAttribute("memberLoginInfo", result);
		}
		return result;
	}
	
	//로그아웃
	@ResponseBody
	@PostMapping("/logout")
	public void logout(HttpSession session) {
		session.removeAttribute("ownerLoginInfo");
		session.removeAttribute("memberLoginInfo");
	}
	//프로필조회
	@GetMapping("/myPage")
	public String profileManage(MemberVO memberVO, HttpSession session,Model model) {
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
	
		model.addAttribute("memberInfo",memberService.memberInfo(member));
		return "member/board/profile_manage";
	}
	//프로필조회 개인정보변경
	@PostMapping("/myPageUpdate")
	public String myPageUpdate(MemberVO memberVO, HttpSession session) {
		//System.out.println("!!!!!!" + memberVO.getMemNickname());
		//String salt = sha256.generateSalt();
		
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");//최소업데이트실행위해
		//String memPw = member.getMemPw();
		//memPw = sha256.getEncrypt(memPw, salt);
		//member.setMemPw(memPw);
		memberVO.setMemId(member.getMemId());//아이디세션값 불러오기
	    memberService.myPageUpdate(memberVO);
		return "redirect:/member/myPage";
	}
	
	//회원탈퇴 페이지 이동
	@GetMapping("/toDropOutForm")
	public String toDropOutForm(MemberVO memberVO, HttpSession session,Model model) {
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		model.addAttribute("memberInfo",memberService.memberInfo(member));
		return "member/board/to_drop_out";
	}
	//회원탈퇴 실행
	@PostMapping("/toDropOut")
	public String toDropOut(MemberVO memberVO, HttpSession session,Model model) {
		memberService.deleteMember(memberVO);
		session.removeAttribute("memberLoginInfo");
		return "redirect:/cafe/main";
	}
	
	//아이디 찾기페이지 이동
	@GetMapping("/find_idForm")
	public String find_idForm() {
		 return "member/find_id";
	}
	
	//아이디 찾기
	@PostMapping("/find_id")
	public String find_id(MemberVO memberVO,Model model){
		memberService.find_id(memberVO);
		model.addAttribute("findId",memberService.find_id(memberVO));
		return "member/find_id_result";
	}
	
	//비밀번호 찾기페이지 이동
	@GetMapping("/find_pwForm")
	public String find_pwForm(MemberVO memberVO,Model model) {
		model.addAttribute("memberVO",memberVO);
		return "member/find_pw";
	}
	
	//비밀번호 찾기
	@PostMapping("/find_pw")
	public String find_pw(MemberVO memberVO,Model model){
		
		 //String salt = memberService.getSaltByMemId(memberVO); 
		 //MemberVO membervo=memberService.find_pw(memberVO); 
		 //String memPw = membervo.getMemPw();
		 
		 //memPw = sha256.getEncrypt(memPw, salt); 
		 //membervo.setMemPw(memPw);
		 //model.addAttribute("findPw",membervo);
		 
		
		//메일 보내기
		MimeMessage message = emailSender.createMimeMessage();
		MimeMessageHelper messageHelper;
		try {
			messageHelper = new MimeMessageHelper(message, true, "UTF-8");
			messageHelper.setFrom("kswoo89@naver.com"); // 보내는사람 생략하거나 하면 정상작동을 안함
			messageHelper.setTo("testjava444@gmail.com"); // 받는사람 이메일
			messageHelper.setSubject("테스트메일"); // 메일제목은 생략이 가능하다
			String RamdomPassword  = memberService.getRamdomPassword();
			memberVO.setMemPw(RamdomPassword);
			memberService.pwUpdate(memberVO);
			
			//memberService.myPageUpdate(memberVO);
			//RamdomPassword = sha256.getEncrypt(RamdomPassword, salt); 
			//membervo.setMemPw(memPw);
			
			String text = "고객님의 임시비밀번호는 " + RamdomPassword + " 입니다.";
			messageHelper.setText(text, true);
			emailSender.send(message);
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return "member/find_pw_result";
	}

}




/*
	public String getRamdomPassword(int size) { 
		char[] charSet = new char[] {
				'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
				'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
				'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
				'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',
				'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
				'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
				'y', 'z', '!', '@', '#', '$', '%', '^', '&' }; 
			StringBuffer sb = new StringBuffer(); 
			SecureRandom sr = new SecureRandom(); 
			sr.setSeed(new Date().getTime()); 
			int idx = 0; // idx = (int) (len * Math.random()); 
			int len = charSet.length; 
			for (int i=0; i<size; i++) {  
				idx = sr.nextInt(len); // 강력한 난수를 발생시키기 위해 SecureRandom을 사용한다. 
				sb.append(charSet[idx]); 
			} 
			return sb.toString(); 
				}
 */