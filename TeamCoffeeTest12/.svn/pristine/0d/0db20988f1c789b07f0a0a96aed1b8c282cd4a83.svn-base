<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 모든 SQL문 mapper태그 안에 작성 -->
<mapper namespace="memberMapper">
	<!-- resultmap 작성 -->
	<resultMap type="com.teamcoffee.member.vo.MemberVO" id="member">
		<id     column="MEM_CODE"		 property="memCode"/>
		<result column="MEM_ID" 		 property="memId"/>
		<result column="MEM_PW"			 property="memPw"/>
		<result column="MEM_NICKNAME" 	 property="memNickname"/>
		<result column="MEM_REG_DATE" 	 property="memRegDate"/>
		<result column="MEM_ADDR" 		 property="memAddr"/>
		<result column="MEM_ADDR_DETAIL" property="memAddrDetail"/>
		<result column="MEM_TEL" 		 property="memTel"/>
		<result column="MEM_EMAIL" 		 property="memEmail"/>
		<result column="SALT"			 property="salt"/>
		<result column="MEM_POINT" 	  	 property="memPoint"/>
		<result column="MEM_GRADE"		 property="memGrade"/>
		<result column="MEM_PROFILE_IMG" property="memProfileImg"/>
		<result column="MEM_LEFT"		 property="memLeft"/>
		<result column="SESSION_KEY" 	 property="sessionKey"/>
		<result column="SESSION_LIMIT"   property="sessionLimit"/>
	</resultMap>
	
	<!-- 아이디 중복체크 -->
	<select id="memIdCheck" resultType="String">
		SELECT MEM_ID
		FROM DJV_MEMBER
		WHERE MEM_ID = #{memId}
	</select>
	
	<!-- 이메일 중복체크 -->
	<select id="memEmailCheck" resultType="String">
		SELECT MEM_Email
		FROM DJV_MEMBER
		WHERE MEM_Email = #{memEmail}
	</select>
	
	<!-- 일반회원 회원가입 처리 -->
	<insert id="insertMember">
		INSERT INTO DJV_MEMBER (
			MEM_CODE
			, MEM_ID
			, MEM_PW
			, MEM_NICKNAME
			, MEM_ADDR
			, MEM_ADDR_DETAIL
			, MEM_TEL
			, MEM_EMAIL
			, SALT
		) VALUES (
			(SELECT 'MEM_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(MEM_CODE, 5))) + 1, 1), 3, '0') FROM DJV_MEMBER)
			, #{memId}
			, #{memPw}
			, #{memNickname}
			, #{memAddr}
			, #{memAddrDetail}
			, #{memTel}
			, #{memEmail}
			, #{salt}
		)
	</insert>
	
	<!-- salt값 셀렉트 -->
	<select id="getSaltByMemId" resultType="String">
		SELECT SALT
		FROM DJV_MEMBER
		WHERE MEM_ID = #{memId}
	</select>
	
	<!-- 일반회원 로그인 처리 -->
	<select id="memberLoginProcess" resultMap="member">
		SELECT MEM_ID
			, MEM_NICKNAME
		FROM DJV_MEMBER
		WHERE MEM_ID = #{memId}
		AND MEM_PW = #{memPw}	
	</select>
		<!-- 일반회원 개인정보조회 -->
	<select id="memberInfo" resultMap="member">
		SELECT MEM_ID
			, MEM_PW
			, MEM_CODE
			, MEM_NICKNAME
			, MEM_ADDR
			, MEM_ADDR_DETAIL
			, MEM_TEL
			, MEM_EMAIL 
			, MEM_GRADE
			, MEM_POINT
			, MEM_PROFILE_IMG
			, MEM_REG_DATE
		FROM DJV_MEMBER
		WHERE MEM_ID = #{memId}
	</select>
		<!-- 일반회원 정보수정 -->
	<update id="myPageUpdate" >
		UPDATE DJV_MEMBER
		SET
		MEM_ID = #{memId}
		<if test="!memPw.equals('')">
		, MEM_PW = #{memPw}
		</if>
		<if test="!memNickname.equals('')">
		, MEM_NICKNAME = #{memNickname}
		</if>
		<if test="!memAddr.equals('')">
		, MEM_ADDR = #{memAddr}
		</if>
		<if test="!memAddrDetail.equals('')">
		, MEM_ADDR_DETAIL = #{memAddrDetail}		
		</if>
		<if test="!memTel.equals('')">
		, MEM_TEL = #{memTel}
		</if>
		, SALT = #{salt}
		WHERE MEM_ID = #{memId}
	</update>
	<!-- 일반회원 탈퇴  -->
	<delete id="deleteMember">
	DELETE DJV_MEMBER
	WHERE MEM_CODE = #{memCode}
	AND MEM_PW = #{memPw}
	</delete>
	<!-- 아이디 찾기 -->
	<select id="find_id" parameterType="String" resultMap="member">
		SELECT MEM_ID
		FROM DJV_MEMBER
		WHERE MEM_EMAIL = #{memEmail}
	</select>
	<!-- 비밀번호 찾기 -->
	<select id="find_pw"  resultMap="member">
		SELECT MEM_CODE
		FROM DJV_MEMBER
		WHERE MEM_EMAIL = #{memEmail}
		AND MEM_ID = #{memId}
	</select>
		<!-- 비밀번호 수정 -->
	<update id="pwUpdate">
		UPDATE DJV_MEMBER
		SET
		MEM_PW = #{memPw}
		, SALT = #{salt}
		WHERE MEM_ID = #{memId}
	</update>
	
		<!-- 일반회원탈퇴처리 중간과정-->
	<select id="memberDropOut" resultMap="member">
		SELECT MEM_ID
			, MEM_PW
			, MEM_CODE 
		FROM DJV_MEMBER
		WHERE MEM_ID = #{memId}
		AND MEM_PW = #{memPw}	
	</select>
	
</mapper>
	
	
	
	<!--  
	<insert id="insertCategory">
		INSERT INTO BOOK_CATEGORY (
			CATEGORY_CODE
			, CATEGORY_NAME
			, CREATE_USER
		) VALUES (
			(SELECT 'CATE_' || LPAD((NVL(MAX(TO_NUMBER(SUBSTR(CATEGORY_CODE, 6, 3))), 0) + 1), 3, '0')
			FROM BOOK_CATEGORY)
			, #{categoryName}
			, #{createUser}
		)
	</insert>
	
	<delete id="deleteCategory">
		DELETE BOOK_CATEGORY
		WHERE CATEGORY_CODE = #{categoryCode}
	</delete>
	
	<insert id="insertItem">
		INSERT INTO BOOK_ITEM (
			ITEM_CODE
			, ITEM_NAME
			, ITEM_PRICE
			, ITEM_STOCK
			, ITEM_INFO
			, CREATE_USER
			, CATEGORY_CODE
		) VALUES (
			(SELECT 'BOOK_' || LPAD((NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6, 3))), 0) + 1), 3, '0')
			FROM BOOK_ITEM)
			, #{itemName}
			, #{itemPrice}
			, #{itemStock}
			, #{itemInfo}
			, #{createUser}
			, #{categoryCode}
		)
	</insert>
	
	<insert id="insertImgs">
		INSERT INTO BOOK_ITEM_IMAGE (
			IMG_CODE
			, IMG_NAME
			, ITEM_CODE
			, IS_MAIN
		)
		<foreach collection="imgList" item="imgInfo" separator="UNION ALL">
			SELECT
				#{imgInfo.imgCode}
				, #{imgInfo.imgName}
				, #{imgInfo.itemCode}
				, #{imgInfo.isMain}
			FROM DUAL
		</foreach>
	</insert>
	
	<select id="selectNextImgNum" resultType="int">
		SELECT NVL(MAX(TO_NUMBER(SUBSTR(IMG_CODE, 5))) + 1, 1)
		FROM BOOK_ITEM_IMAGE
	</select>
	
	<select id="selectMaxItemCode" resultType="String">
		SELECT MAX(ITEM_CODE)
		FROM BOOK_ITEM
	</select>
	
	<select id="selectSalesList" resultMap="buyMapper.buyView">
		SELECT BUY_CODE
			, ITEM_CODE
			, ITEM_PRICE			
			, BUY_QUANTITY
			, BUYER
			, NAME
			, BUY_DATE
		FROM BUY_INFO_VIEW
		<![CDATA[
		WHERE TO_CHAR(BUY_DATE, 'YYYY-MM-DD') >= #{firstDate}
		AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') <= #{nowDate}
		]]>
		<if test="!searchValue.equals('')">
		AND LOWER(BUYER) LIKE LOWER('%' || #{searchValue} || '%')
		OR LOWER(NAME) LIKE LOWER('%' || #{searchValue} || '%')
		</if>
		ORDER BY BUY_CODE DESC
	</select>
	
	<select id="selectBuyInfoDetail" resultMap="buyMapper.buyView">
		SELECT BUY_CODE
			, ITEM_NAME
			, ITEM_PRICE
			, IMG_NAME
			, BUY_QUANTITY
			, TOTAL_PRICE
		FROM BUY_INFO_VIEW
		WHERE BUY_CODE = #{buyCode}
	</select>
	
	<select id="selectManageItemList" resultMap="itemMapper.itemView">
		SELECT ITEM_CODE
			, ITEM_NAME
			, IMG_NAME
			, ITEM_PRICE
			, ITEM_STOCK
			, ITEM_STATUS
		FROM ITEM_VIEW
		WHERE IS_MAIN = 'Y'
		<if test="categoryCode != null and !categoryCode.equals('')">
		AND CATEGORY_CODE = #{categoryCode}
		</if>
		<if test="itemName != null and !itemName.equals('')">
		AND LOWER(ITEM_NAME) LIKE '%' || LOWER(#{itemName}) || '%'
		</if>
		<if test="itemStatuses != null">
		AND ITEM_STATUS IN 
			<foreach collection="itemStatuses" open="(" separator="," close=")" item="itemStatus">
			${itemStatus}			
			</foreach>
		</if>
		ORDER BY
		<choose>
			<when test="order != null and !order.equals('') or sort != null and !sort.equals('')">
			${order} ${sort}
			</when>
			<otherwise>
			ITEM_NAME
			</otherwise>
		</choose>
	</select>
	
	<update id="changePrice">
		UPDATE BOOK_ITEM
		SET ITEM_PRICE = #{itemPrice}
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<update id="changeStock">
		UPDATE BOOK_ITEM
		SET ITEM_STOCK = #{itemStock}
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<update id="changeStatus">
		UPDATE BOOK_ITEM
		SET ITEM_STATUS = #{itemStatus}
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<select id="selectMemberList" resultMap="memberMapper.memberView">
		SELECT ID
			, NAME
			, TEL
			, MEMBERSHIP
			, REG_DATE
		FROM MEMBER_VIEW
		ORDER BY REG_DATE DESC
	</select>
	
	<select id="selectMemberDetail" resultMap="memberMapper.memberView">
		SELECT ID
			, NAME
			, TEL
			, ADDR_ALL
			, EMAIL
			, GENDER
			, MEMBERSHIP
			, TO_CHAR(REG_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REG_DATE
		FROM MEMBER_VIEW
		WHERE ID = #{id}
	</select>
	-->
	
	
