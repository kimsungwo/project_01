package com.teamcoffee.member.controller;


import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.util.WebUtils;

import com.teamcoffee.buy.service.BuyService;
import com.teamcoffee.buy.vo.BuyViewVO;
import com.teamcoffee.like.service.LikeService;
import com.teamcoffee.member.service.MemberService;
import com.teamcoffee.member.vo.MemberVO;
import com.teamcoffee.member.vo.PointVO;
import com.teamcoffee.review.service.ReviewService;
import com.teamcoffee.review.vo.ReviewVO;
import com.teamcoffee.util.FileUploadUtil;
import com.teamcoffee.util.sha256;


@Controller
@RequestMapping("/member")
public class MemberController {
	
	@Resource(name = "memberService")
	private MemberService memberService;
	
	@Resource(name = "likeService")
	private LikeService likeService;
	
	@Resource(name = "buyService")
	private BuyService buyService;
	
	@Resource(name = "reviewService")
	private ReviewService reviewService;
	
	@Autowired
	private JavaMailSender emailSender;
	
	//일반회원 회원가입 페이지 이동
	@GetMapping("/joinMember")
	public String joinMember() {
		return "member/join_form";
	}
	
	//아이디 중복확인
	@ResponseBody
	@PostMapping("/memIdCheck")
	public void memIdCheck(MemberVO memberVO, HttpServletResponse response) throws IOException {
		int result = memberService.memIdCheck(memberVO);
		PrintWriter out = response.getWriter();
		if(result == 0) {
			out.print(true);
		}
		else if(result == 1) {
			out.print(false);
		}
	}
	
	//이메일 중복확인
	@ResponseBody
	@PostMapping("/memEmailCheck")
	public void memEmailCheck(MemberVO memberVO, HttpServletResponse response) throws IOException {
		int result = memberService.memEmailCheck(memberVO);
		PrintWriter out = response.getWriter();
		if(result == 0) {
			out.print(true);
		}
		else if(result == 1) {
			out.print(false);
		}
	}

	//일반회원 회원가입 처리
	@PostMapping("/insertMember")
	public String insertMember(MemberVO memberVO, MultipartHttpServletRequest multi) {
		
		if(multi.getFile("file1") != null) {
			//첨부파일 업로드
			//경로설정
			String path = "D:\\workspaceSTS\\TeamCoffee\\src\\main\\webapp\\resources\\img\\profile\\";
			//input태그에서 file명 받아오기
			MultipartFile file =  multi.getFile("file1");
			
			String fileName = FileUploadUtil.getNowDateTime() + "_" + file.getOriginalFilename();
			memberVO.setMemProfileImg(fileName);
			
			//첨부파일 등록
			try {
				file.transferTo(new File(path + fileName));
			} catch (IllegalStateException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			memberService.insertMember(memberVO);
		}
		else {
			memberService.insertMember(memberVO);
		}
		
		
		return "redirect:/cafe/main";
	}
	
	//일반회원 로그인 처리
	@ResponseBody
	@PostMapping("/memberLoginProcess")
	public boolean memberLoginProcess(MemberVO memberVO, HttpSession session, HttpServletRequest request, HttpServletResponse response ,Model model) {
		String salt = memberService.getSaltByMemId(memberVO);
		if(salt == null) {
			return false;
		}
		else {
			String memPw = memberVO.getMemPw();
			
			memPw = sha256.getEncrypt(memPw, salt);
			memberVO.setMemPw(memPw);
			MemberVO memVO = memberService.memberLoginProcess(memberVO);
			if(memVO != null) {
				session.setAttribute("memberLoginInfo", memVO);
				
				if(request.getParameter("useCookie") != null) {
					//쿠키 생성
					Cookie loginCookie = new Cookie("loginCookie", session.getId());
					loginCookie.setPath("/"); 
					loginCookie.setMaxAge(60*60*24*7);
					//전송 
					response.addCookie(loginCookie);
				}
			}
			//로그인 유지를 선택할 경우
			if(memberVO.getUseCookie() != null) {
				int amount = 60 * 60 * 24 * 7;
				Date sessionLimit = new Date(System.currentTimeMillis() + (1000 * amount)); //로그인 유지기간 설정
				memberService.keepLogin(memVO.getMemId(), session.getId(), sessionLimit);
			}
			return memVO != null ? true : false;
		}
	}
	
	//로그아웃
	@ResponseBody
	@PostMapping("/memberLogout")
	public void logout(HttpSession session, HttpServletRequest request, HttpServletResponse response) {
		session.removeAttribute("memberLoginInfo");
		session.invalidate();
		Cookie loginCookie = WebUtils.getCookie(request, "loginCookie");
		if(loginCookie != null) {
			loginCookie.setPath("/");
			loginCookie.setMaxAge(0);
			response.addCookie(loginCookie);
			memberService.keepLogin(session.getId(), "none", new Date());
		}
	}
	
	//프로필조회
	@GetMapping("/myPage")
	public String profileManage(@RequestParam(name="sideMenu", required = false, defaultValue = "1") String sideMenu, MemberVO memberVO, HttpSession session,Model model) {
		model.addAttribute("sideMenu", sideMenu);
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
	
		model.addAttribute("memberInfo",memberService.memberInfo(member));
		return "member/board/profile_manage";
	}
	//프로필조회 개인정보변경
	@PostMapping("/myPageUpdate")
	public String myPageUpdate(MemberVO memberVO, HttpSession session) {
		
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");//최소업데이트실행위해
		memberVO.setMemId(member.getMemId());//아이디세션값 불러오기
	    memberService.myPageUpdate(memberVO);
		return "member/profile_manage_update_result";
	}
	
	//회원탈퇴 페이지 이동
	@GetMapping("/toDropOutForm")
	public String toDropOutForm(@RequestParam(name="sideMenu", required = false, defaultValue = "6") String sideMenu, MemberVO memberVO, HttpSession session,Model model) {
		model.addAttribute("sideMenu", sideMenu);
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		model.addAttribute("memberInfo",memberService.memberInfo(member));
		return "member/board/to_drop_out";
	}
	//회원탈퇴 실행
	@PostMapping("/toDropOut")
	public String toDropOut(MemberVO memberVO, HttpSession session,Model model) {
		String salt = memberService.getSaltByMemId(memberVO);
		String memPw = memberVO.getMemPw();
		//실행시 잘못된 비밀번호입력시에도 if문타서 세션만 초기화됨
		memPw = sha256.getEncrypt(memPw, salt);
		memberVO.setMemPw(memPw);
		MemberVO result = memberService.memberDropOut(memberVO);
		if(result != null) {
			memberService.deleteMember(memberVO);
			session.removeAttribute("memberLoginInfo");
		}
		else {
			model.addAttribute("memberLoginInfo", result);
		}
		return "member/board/to_drop_out_result";
	}
	
	//아이디 찾기페이지 이동
	@GetMapping("/find_idForm")
	public String find_idForm() {
		 return "member/find_id";
	}
	
	//아이디 찾기
	@PostMapping("/find_id")
	public String find_id(MemberVO memberVO,Model model){
		memberService.find_id(memberVO);
		model.addAttribute("findId",memberService.find_id(memberVO));
		return "member/find_id_result";
	}
	
	//비밀번호 찾기페이지 이동
	@GetMapping("/find_pwForm")
	public String find_pwForm(MemberVO memberVO,Model model) {
		model.addAttribute("memberVO",memberVO);
		return "member/find_pw";
	}
	
	//비밀번호 찾기
	@PostMapping("/find_pw")
	public String find_pw(MemberVO memberVO, Model model) {

		MemberVO memCodeFindResult = memberService.find_pw(memberVO);

		if (memCodeFindResult != null) {

			// 메일 보내기
			MimeMessage message = emailSender.createMimeMessage();
			MimeMessageHelper messageHelper;
			try {
				messageHelper = new MimeMessageHelper(message, true, "UTF-8");
				messageHelper.setFrom("kswoo89@naver.com"); // 보내는사람 생략하거나 하면 정상작동을 안함
				messageHelper.setTo(memberVO.getMemEmail()); // 받는사람 이메일
				messageHelper.setSubject("임시 비밀번호 발급"); // 메일제목은 생략이 가능하다

				String RamdomPassword = memberService.getRamdomPassword();
				memberVO.setMemPw(RamdomPassword);
				memberService.pwUpdate(memberVO);

				String text = "고객님의 임시비밀번호는" + RamdomPassword + "입니다.";
				messageHelper.setText(text, true);
				emailSender.send(message);
			} catch (MessagingException e) {
				e.printStackTrace();
			}
		}
		model.addAttribute("findPw", memCodeFindResult);
		return "member/find_pw_result";
	}
	//찜한매장 페이지
	@GetMapping("/likeCafeList")
	public String likeCafeList(@RequestParam(name="sideMenu", required = false, defaultValue = "4") String sideMenu, Model model, HttpSession session) {
		model.addAttribute("sideMenu", sideMenu);
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		model.addAttribute("likeCafeList", likeService.likeCafeList(member.getMemCode()));
		return "member/board/like_cafe_list";
	}
	
	//회원 메인페이지 이동
	@GetMapping("/memberMain")
	public String memberMain(@RequestParam(name="sideMenu", required = false, defaultValue = "1") String sideMenu, MemberVO memberVO, HttpSession session,Model model) {
		model.addAttribute("sideMenu", sideMenu);
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		model.addAttribute("memberInfo",memberService.memberInfo(member));
		return "member/member_main";
	}
		
	//주문내역 페이지
	@GetMapping("/buyList")
	public String buyList(@RequestParam(name="sideMenu", required = false, defaultValue = "2") String sideMenu, Model model, HttpSession session) {
		model.addAttribute("sideMenu", sideMenu);
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		model.addAttribute("buyList", buyService.selectBuyList(member));
		return "member/board/buy_list";
	}
	
	//포인트 조회 페이지
		@GetMapping("/pointList")
		public String pointList(@RequestParam(name="sideMenu", required = false, defaultValue = "3") String sideMenu, Model model, HttpSession session) {
			model.addAttribute("sideMenu", sideMenu);
			MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
			model.addAttribute("pointList", memberService.selectPointList(member));
			return "member/board/point_list";
		}

	
	//리뷰목록 페이지
	@GetMapping("/reviewList")
	public String reviewList(@RequestParam(name="sideMenu", required = false, defaultValue = "5") String sideMenu, ReviewVO reviewVO, HttpSession session, Model model) {
		model.addAttribute("sideMenu", sideMenu);
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		reviewVO.setMemCode(member.getMemCode());
		model.addAttribute("reviewList", reviewService.reviewListbyMemCode(reviewVO));
		return "member/board/review_list";
	}
	
	//포인트 내역 추가
	@ResponseBody
	@PostMapping("/insertPointHistory")
	public int insertPointHistory(HttpSession session, PointVO pointVO) {
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		pointVO.setMemCode(member.getMemCode());
		return memberService.insertPointHistory(pointVO);
	}
	
	//사용 포인트 반영
	@ResponseBody
	@PostMapping("/updateMemPoint")
	public int updateMemPoint(HttpSession session, MemberVO memberVO) {
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		memberVO.setMemCode(member.getMemCode());
		return memberService.updateMemPoint(memberVO);
	}
	//주문 승인 및 취소 알림
	@ResponseBody
	@PostMapping("/checkMemberConfirm")
	public List<BuyViewVO> checkMemberConfirm(HttpSession session){
		MemberVO member = (MemberVO)session.getAttribute("memberLoginInfo");
		return memberService.checkMemberConfirm(member);
	}
		
}
