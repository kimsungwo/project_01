package com.shop.admin.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.shop.item.service.ItemService;
import com.shop.item.vo.CategoryVO;
import com.shop.item.vo.ImgVO;
import com.shop.item.vo.ItemVO;
import com.shop.member.vo.MemberVO;

@Controller
@RequestMapping("/admin") 
public class AdminController {
	
	@Resource(name="itemService") 
	private ItemService itemService;
	
	//카테고리관리 페이지
	@GetMapping("/categoryManage")
	public String categoryManage(@RequestParam(name = "sideMenu",required = false, defaultValue = "1") String sideMenu,Model model) {
		//상품 카테고리 목록을 조회후 와야됨
		model.addAttribute("categoryList",itemService.selectCategoryList());		
		model.addAttribute("sideMenu",sideMenu);	
		
		return "admin/category_manage";
	}
	//상품등록페이지
	@GetMapping("/insertItem")
	public String insertItem(@RequestParam(name = "sideMenu",required = false, defaultValue = "2")String sideMenu,Model model) {
		//상품 카테고리 목록을 조회후 와야됨
		model.addAttribute("categoryList",itemService.selectCategoryList());		
		model.addAttribute("sideMenu",sideMenu);
		return "admin/item_form";
	}
	//카테고리추가삽입
	@PostMapping("/insertCategory")
	public String insertCategory(CategoryVO categoryVO, HttpSession session) {
		MemberVO memberVO = (MemberVO)session.getAttribute("loginInfo");
		categoryVO.setCreateUser(memberVO.getId());
		itemService.insertCategory(categoryVO);

		return "redirect:/admin/categoryManage";
	}
	//카테고리 삭제
	@GetMapping("/deleteCategory")
	public String deleteCategory(CategoryVO categoryVO) {
		itemService.deleteCategory(categoryVO);
		return "redirect:/admin/categoryManage";
	}
	//제품등록
	@PostMapping("/insertItem")
	public String insertItem(ItemVO itemVO, HttpSession session,MultipartHttpServletRequest multi) {//세션에서 유저를 끄집어내야됨
	
		//상품등록
		MemberVO memberVO = (MemberVO)session.getAttribute("loginInfo");
		itemVO.setCreateUser(memberVO.getId()); 
		itemService.insertItem(itemVO);
		
		//방금 등록된 상품의 itemCode를 가져온다.
		String itemCode = itemService.selectMaxItemCode();
		
		
		
		//첨부파일등록
		//저장경로 지정해야됨
		String path = "D:\\학원실습자료\\workspaceSTS\\SHOP\\src\\main\\webapp\\resources\\image\\";
		//input태그중 타입이 file인 태그의 name속성값을 가져옴.
		Iterator<String> files = multi.getFileNames();
		
		//이미지 정보를 저장할 객체 생성
		List<ImgVO> imgList = new ArrayList<ImgVO>();
		ImgVO vo = null;
		
		//다음에 들어갈 이미지정보의 번호를 가져온다.
		int nextNumber = itemService.selectNextImgNumber();
		
		
		//filse에 데이터가 있는만큼 반복하겠음.
		while(files.hasNext()) {
			String inputTagName = files.next();
		//태그에 있는 파일정보를 가져온다.
		MultipartFile file =  multi.getFile(inputTagName);
		System.out.println(file.getOriginalFilename());
		String fileName = "";
		
		//파일명 중복을 제거하기 위해 파일명 앞에 현재날짜&시간추가해줄것
		
		Calendar cal = Calendar.getInstance();
		fileName = fileName + cal.get(Calendar.YEAR);
		fileName = fileName + cal.get(Calendar.MONTH)+1;
		fileName = fileName + cal.get(Calendar.DATE);
		fileName = fileName + cal.get(Calendar.HOUR);
		fileName = fileName + cal.get(Calendar.MINUTE);
		fileName = fileName + cal.get(Calendar.SECOND);
		fileName = fileName + cal.get(Calendar.MILLISECOND);
		fileName = fileName + "_" + file.getOriginalFilename();
		
		//실제업로드(경로와 파일명필요 어떤이름으로, 어디에)	
		try {
			file.transferTo(new File(path + fileName));
			vo.setImgName(fileName);
			
			//String.format("%03d", 5); //DB로 따지면 LPAD(5,3,0); 해당숫자5를 3자리로 맞추는데 모자라면 0으로 채우겠다.
			vo.setImgCode("IMG_"+String.format("%03d", nextNumber++));
			vo.setIsMain(inputTagName.equals("mainImg") ? "Y" : "N" );
			vo.setItemCode(itemCode); 	
			
			
			imgList.add(vo);
			
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
		}
		
		

		//이미지정보를 DB에 등록
		ImgVO imgVO = new ImgVO();
		imgVO.setImgList(imgList);
		itemService.insertImgs(imgVO);   //VO에 리스트를 만들어줘야 다중이미지적용된거 적용시킬수있음
		
		return "redirect:/admin/insertItem";
	}
	
	
}
